#!/usr/bin/env python
PACKAGE = "cat_backend"
from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()

INITIALIZE =      -1 
TELEOP_DISABLE =   1 
TELEOP_JT =        2
TELEOP_IK =        3
TELEOP_MP =        4
TELEOP_CVX =       5
POSITION_IK =      6
VELOCITY_IK =      7
PLANNING_GROUP =   8
TELEOP_SETTINGS =  9
TELEOP_MODE =     10
RESET_STATE =     11
DEBUG_INFO =      12

OMPL_PLANNER_START = 13
SBLkConfigDefault        = 13
LBKPIECEkConfigDefault   = 14
RRTkConfigDefault        = 15
RRTConnectkConfigDefault = 16
ESTkConfigDefault        = 17
KPIECEkConfigDefault     = 18
BKPIECEkConfigDefault    = 19
RRTStarkConfigDefault    = 20
OMPL_PLANNER_END = 20

TELEOP_COMMAND  =  21
RECORD_DATA     =  22

# ---------------------------------------------------------------------------------------------------------
# Generate constants for reference in code 
# ---------------------------------------------------------------------------------------------------------

gen.const("INITIALIZE",     int_t,  INITIALIZE,   "level called on construction")
teleop_enum = gen.enum([ gen.const("TELEOP_DISABLE",  int_t, TELEOP_DISABLE,  "Disable"),
                       gen.const("TELEOP_JT",         int_t, TELEOP_JT,       "J-Transpose"),
                       gen.const("TELEOP_IK",         int_t, TELEOP_IK,       "Inverse Kinematics"),
                       gen.const("TELEOP_MP",         int_t, TELEOP_MP,       "Motion Planning"),
                       gen.const("TELEOP_CVX",        int_t, TELEOP_CVX,      "Optimization") ],
                  "An enum to set teleop mode")
ik_enum = gen.enum([   gen.const("POSITION_IK",       int_t, POSITION_IK,     "Use position-based IK"),
                       gen.const("VELOCITY_IK",       int_t, VELOCITY_IK,     "Use differential IK") ],
                  "An enum to set the IK type")

ompl_enum = gen.enum([ 
                       gen.const("SBLkConfigDefault",         int_t,    SBLkConfigDefault ,         "OMPL Planner choice"),
                       gen.const("LBKPIECEkConfigDefault",    int_t,    LBKPIECEkConfigDefault ,    "OMPL Planner choice"),
                       gen.const("RRTkConfigDefault",         int_t,    RRTkConfigDefault  ,        "OMPL Planner choice"),
                       gen.const("RRTConnectkConfigDefault",  int_t,    RRTConnectkConfigDefault ,  "OMPL Planner choice"),
                       gen.const("ESTkConfigDefault",         int_t,    ESTkConfigDefault ,         "OMPL Planner choice"),
                       gen.const("KPIECEkConfigDefault",      int_t,    KPIECEkConfigDefault ,      "OMPL Planner choice"),
                       gen.const("BKPIECEkConfigDefault",     int_t,    BKPIECEkConfigDefault ,     "OMPL Planner choice"),
                       gen.const("RRTStarkConfigDefault",     int_t,    RRTStarkConfigDefault ,     "OMPL Planner choice")
                      ],
                  "Choose which planner ompl uses")

gen.const("PLANNING_GROUP",     int_t,  PLANNING_GROUP,   "level for planning group changes")
gen.const("TELEOP_SETTINGS",    int_t,  TELEOP_SETTINGS,  "level for teleop setting changes")
gen.const("TELEOP_MODE",        int_t,  TELEOP_MODE,      "level for teleop mode changes")
gen.const("RESET_STATE",        int_t,  RESET_STATE,      "level for resetting the current state")
gen.const("DEBUG_INFO",         int_t,  DEBUG_INFO,       "level for toggling debug info")
gen.const("TELEOP_COMMAND",     int_t,  TELEOP_COMMAND,   "level for commanding saved poses")
gen.const("RECORD_DATA",        int_t,  RECORD_DATA,      "level for starting and stopping data recording")

# ---------------------------------------------------------------------------------------------------------
# Now add actual fields
# ---------------------------------------------------------------------------------------------------------

gen.add("reset_state",      bool_t,    RESET_STATE,     "Reset query arm to current robot state", False)
gen.add("planning_group",   str_t,     PLANNING_GROUP,  "The group to plan for", "left_arm")
gen.add("teleop_mode",      int_t,     TELEOP_MODE,     "The mode for teleoperation", TELEOP_DISABLE, TELEOP_DISABLE, TELEOP_CVX, edit_method=teleop_enum)
gen.add("ompl_planner",     int_t,     TELEOP_SETTINGS, "Which OMPL planner to use",  OMPL_PLANNER_START, OMPL_PLANNER_START, OMPL_PLANNER_END, edit_method=ompl_enum)
gen.add("saved_pose_1",     str_t,     TELEOP_SETTINGS, "The name of a saved database pose.", "pr2ft_state_ready_side")
gen.add("send_pose_1",      bool_t,    TELEOP_COMMAND,  "Command the currently named pose", False)
gen.add("saved_pose_2",     str_t,     TELEOP_SETTINGS, "The name of a saved database pose.", "pr2ft_state_ready_side")
gen.add("send_pose_2",      bool_t,    TELEOP_COMMAND,  "Command the currently named pose", False)
gen.add("data_file",        str_t,     TELEOP_SETTINGS, "The name of a data file to save to", "data.txt")
gen.add("record_data",      bool_t,    RECORD_DATA,     "Start and stop data recording", False)
gen.add("marker_scale",     double_t,  PLANNING_GROUP,  "Scale for interactive markers", 0, 0, 1)
gen.add("offset_x",         double_t,  PLANNING_GROUP,  "The x-offset for enf-effector controls", 0.16, -0.25, 0.25)
gen.add("show_controls",    bool_t,    PLANNING_GROUP,  "Show control rings/arrows", True)
gen.add("target_period",    double_t,  TELEOP_SETTINGS, "Target teleop update period", 0.5, 0.01, 4)
gen.add("growth_factor",    double_t,  TELEOP_SETTINGS, "Filter for period adjustment", 1.5, 1, 2)
gen.add("shrink_factor",    double_t,  TELEOP_SETTINGS, "Filter for period adjustment", 0.2, 0, 1)
gen.add("sleep_remainder",  bool_t,    TELEOP_SETTINGS, "Whether to sleep for left-over period", True)
gen.add("joint_tolerance",  double_t,  TELEOP_SETTINGS, "Tolerance for joint goal", 0.00001, 0.000001, 0.1)
gen.add("pos_deadband",     double_t,  TELEOP_SETTINGS, "Tolerance for position", 0, 0, 0.05)
gen.add("angle_deadband",   double_t,  TELEOP_SETTINGS, "Tolerance for angle",    0, 0, 0.35)
gen.add("no_first_accel",    bool_t,  DEBUG_INFO, "Over-writes first trajectory point accelerations", True)
gen.add("no_last_accel",     bool_t,  DEBUG_INFO, "Over-writes last trajectory point accelerations", True)
gen.add("interpolate",       bool_t,  DEBUG_INFO, "Linearly interpolate state (otherwise, use the next later state).", False)


gen.add("jt_linear_clip_ratio", double_t,  TELEOP_JT, "JT linear clip = period * ratio", 2, 0, 10)
gen.add("jt_angle_clip_ratio",  double_t,  TELEOP_JT, "JT angle clip = period * time",  10, 0, 100)
gen.add("ik_speed_mult",         double_t,  TELEOP_IK, "Increase or decrease velocity limits",     1, 0.2, 5)
gen.add("ik_states",             int_t,    TELEOP_IK, "Number of states to use for IK trajectory",     4,    2, 5)
gen.add("ik_attempts",             int_t,  TELEOP_IK, "Number of IK attempts",     1,    1, 10)
gen.add("ik_timeout",           double_t,  TELEOP_IK, "IK timeout period",       0.1, 0.01, 0.2)
gen.add("collision_aware_ik",     bool_t,  TELEOP_IK, "Indicates whether the IK check should be collision-aware.", True)
gen.add("ik_type",                 int_t,  TELEOP_IK, "Set the type of IK to use", POSITION_IK, POSITION_IK, VELOCITY_IK, edit_method=ik_enum)

gen.add("cvx_ik_posture",        bool_t,  TELEOP_SETTINGS, "If true, sets the current IK posture as the bias for CVX. Otherwise, sets 'centered' posture.", False)
gen.add("verbose",           bool_t,  DEBUG_INFO, "Enables verbose debug output", False)


exit(gen.generate(PACKAGE, PACKAGE, "Backend"))


