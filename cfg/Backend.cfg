#!/usr/bin/env python
PACKAGE = "cat_backend"
from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()

INITIALIZE =      -1 
TELEOP_DISABLE =   1 
TELEOP_JT =        2
TELEOP_IK =        3
TELEOP_MP =        4
TELEOP_CVX =       5
POSITION_IK =      6
VELOCITY_IK =      7
PLANNING_GROUP =   8
TELEOP_SETTINGS =  9
TELEOP_MODE =     10
RESET_STATE =     11
DEBUG_INFO =      12

# ---------------------------------------------------------------------------------------------------------
# Generate constants for reference in code 
# ---------------------------------------------------------------------------------------------------------

gen.const("INITIALIZE",     int_t,  INITIALIZE,   "level called on construction")
teleop_enum = gen.enum([ gen.const("TELEOP_DISABLE",  int_t, TELEOP_DISABLE,  "Disable"),
                       gen.const("TELEOP_JT",         int_t, TELEOP_JT,       "J-Transpose"),
                       gen.const("TELEOP_IK",         int_t, TELEOP_IK,       "Inverse Kinematics"),
                       gen.const("TELEOP_MP",         int_t, TELEOP_MP,       "Motion Planning"),
                       gen.const("TELEOP_CVX",        int_t, TELEOP_CVX,      "Optimization") ],
                  "An enum to set teleop mode")
ik_enum = gen.enum([   gen.const("POSITION_IK",       int_t, POSITION_IK,     "Use position-based IK"),
                       gen.const("VELOCITY_IK",       int_t, VELOCITY_IK,     "Use differential IK") ],
                  "An enum to set the IK type")

gen.const("PLANNING_GROUP",     int_t,  PLANNING_GROUP,   "level for planning group changes")
gen.const("TELEOP_SETTINGS",    int_t,  TELEOP_SETTINGS,  "level for teleop setting changes")
gen.const("TELEOP_MODE",        int_t,  TELEOP_MODE,      "level for teleop mode changes")
gen.const("RESET_STATE",        int_t,  RESET_STATE,      "level for resetting the current state")
gen.const("DEBUG_INFO",         int_t,  DEBUG_INFO,       "level for toggling debug info")

# ---------------------------------------------------------------------------------------------------------
# Now add actual fields
# ---------------------------------------------------------------------------------------------------------

gen.add("reset_state",      bool_t,    RESET_STATE,    "Reset query arm to current robot state", False)
gen.add("planning_group",   str_t,     PLANNING_GROUP, "The group to plan for", "right_arm")
gen.add("show_controls",    bool_t,    PLANNING_GROUP, "Show control rings/arrows", True)
gen.add("marker_scale",     double_t,  PLANNING_GROUP, "Scale for interactive markers", 0, 0, 1)
gen.add("offset_x",         double_t,  PLANNING_GROUP, "The x-offset for enf-effector controls", 0.12, -0.25, 0.25)
gen.add("target_period",    double_t,  TELEOP_SETTINGS, "Target teleop update period", 0.5, 0.01, 4)
gen.add("growth_factor",    double_t,  TELEOP_SETTINGS, "Filter for period adjustment", 1.2, 1, 2)
gen.add("shrink_factor",    double_t,  TELEOP_SETTINGS, "Filter for period adjustment", 0.2, 0, 1)
gen.add("sleep_remainder",  bool_t,    TELEOP_SETTINGS, "Whether to sleep for left-over period", True)
gen.add("goal_tolerance",   double_t,  TELEOP_SETTINGS, "Tolerance for joint goal", 0.0001, 0.00001, 0.1)

gen.add("teleop_mode", int_t, TELEOP_MODE, "The mode for teleoperation", TELEOP_DISABLE, TELEOP_DISABLE, TELEOP_CVX, edit_method=teleop_enum)

gen.add("jt_linear_clip_ratio", double_t,  TELEOP_JT, "JT linear clip = period * ratio", 4, 0, 10)
gen.add("jt_angle_clip_ratio",  double_t,  TELEOP_JT, "JT angle clip = period * time", 20, 0, 100)
gen.add("ik_traj_time",         double_t,  TELEOP_IK, "IK trajectory time", 0.15, 0.05, 1)
gen.add("ik_attempts",             int_t,  TELEOP_IK, "Number of IK attempts", 1, 1, 10)
gen.add("ik_timeout",           double_t,  TELEOP_IK, "IK timeout period", 0.1, 0.01, 0.2)
gen.add("collision_aware_ik",     bool_t,  TELEOP_IK, "Indicates whether the IK check should be collision-aware.", True)
gen.add("ik_type",                 int_t,  TELEOP_IK, "Set the type of IK to use", POSITION_IK, POSITION_IK, VELOCITY_IK, edit_method=ik_enum)

gen.add("verbose",     bool_t,  DEBUG_INFO, "Enables verbose debug output", False)


exit(gen.generate(PACKAGE, PACKAGE, "Backend"))


